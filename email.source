---------------------------------------------------------------------------
--
-- email.sql
--
-- COMP9315 Database Systems Imp 
-- Stuart Aitken, Gina Jordanova
-- Assignment 1 Adding an Email Data Type to PostgreSQL
--
-- src/tutorial/emailaddress.source
--
---------------------------------------------------------------------------

-- the input function 'email_in' takes the textual representation and
-- converts it into the internal representation.

CREATE FUNCTION email_in(cstring)
   RETURNS emailaddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'email_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_out(emailaddress)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'email_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION email_recv(internal)
   RETURNS emailaddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'email_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION email_send(emailaddress)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


-- Type creation.

CREATE TYPE emailaddress (
   internallength = 256,
   input          = email_in,
   output         = email_out,
   receive        = email_recv,
   send           = email_send,
   alignment      = char
);


-- define the required operators

CREATE FUNCTION email_lt(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_le(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_eq(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_neq(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_gt(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_ge(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_deq(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_ndeq(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;



CREATE OPERATOR < (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_lt,
   commutator = > ,
   negator    = >= ,
   restrict   = scalarltsel,
   join       = scalarltjoinsel
);

CREATE OPERATOR <= (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_le,
   commutator = >= ,
   negator    = > ,
   restrict   = scalarltsel,
   join       = scalarltjoinsel
);

CREATE OPERATOR = (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_eq,
   commutator = = ,
   negator    = <>,
   restrict   = eqsel,
   join       = eqjoinsel,
   HASHES,
   MERGES
);

CREATE OPERATOR <> (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_neq,
   commutator = <> ,
   negator    = =,
   restrict   = neqsel,
   join       = neqjoinsel,
   HASHES,
   MERGES
);

CREATE OPERATOR >= (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_ge,
   commutator = <= ,
   negator    = < ,
   restrict   = scalargtsel,
   join       = scalargtjoinsel
);

CREATE OPERATOR > (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_gt,
   commutator = < ,
   negator    = <= ,
   restrict   = scalargtsel,
   join       = scalargtjoinsel
);

CREATE OPERATOR ~ (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_deq,
   commutator = ~ ,
   negator    = !~ ,
   restrict   = eqsel,
   join       = eqjoinsel,
   HASHES,
   MERGES
);

CREATE OPERATOR !~ (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_ndeq,
   commutator = !~ ,
   negator    = ~ ,
   restrict   = neqsel,
   join       = neqjoinsel,
   HASHES,
   MERGES
);


-- create the support function

CREATE FUNCTION email_cmp(emailaddress, emailaddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_hval(emailaddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;


-- make the operator class

CREATE OPERATOR CLASS emailaddress_btree_ops
    DEFAULT FOR TYPE emailaddress USING btree AS
        OPERATOR        1       <  (emailaddress, emailaddress),
        OPERATOR        2       <= (emailaddress, emailaddress),
        OPERATOR        3       =  (emailaddress, emailaddress),
        OPERATOR        4       >= (emailaddress, emailaddress),
        OPERATOR        5       >  (emailaddress, emailaddress),
	FUNCTION        1       email_cmp(emailaddress, emailaddress);

CREATE OPERATOR CLASS emailaddress_hash_ops
    DEFAULT FOR TYPE emailaddress USING hash AS
        OPERATOR        1       = ,
        FUNCTION        1       email_hval(emailaddress);
