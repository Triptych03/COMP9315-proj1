---------------------------------------------------------------------------
--
-- email.sql
--
-- COMP9315 Database Systems Imp 
-- Stuart Aitken, Gina Jordanova
-- Assignment 1 Adding an Email Data Type to PostgreSQL
--
-- src/tutorial/email.source
--
---------------------------------------------------------------------------

-- the input function 'email_in' takes the textual representation and
-- converts it into the internal representation.

CREATE FUNCTION email_in(cstring)
   RETURNS email
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'email_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_out(email)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'email_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION email_recv(internal)
   RETURNS email
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'email_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION email_send(email)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


-- Type creation.

CREATE TYPE email (
   internallength = 256,
   input          = email_in,
   output         = email_out,
   receive        = email_recv,
   send           = email_send,
   alignment      = char
);


-- define the required operators

CREATE FUNCTION email_lt(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_le(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_eq(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_neq(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_gt(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_ge(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_deq(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_ndeq(email, email) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;



CREATE OPERATOR < (
   leftarg    = email, 
   rightarg   = email,
   procedure  = email_lt,
   commutator = > ,
   negator    = >= ,
   restrict   = scalarltsel,
   join       = scalarltjoinsel
);

CREATE OPERATOR <= (
   leftarg    = email, 
   rightarg   = email,
   procedure  = email_le,
   commutator = >= ,
   negator    = > ,
   restrict   = scalarltsel,
   join       = scalarltjoinsel
);

CREATE OPERATOR = (
   leftarg    = email, 
   rightarg   = email,
   procedure  = email_eq,
   commutator = = ,
   negator    = <>,
   restrict   = eqsel,
   join       = eqjoinsel,
   HASHES,
   MERGES
);

CREATE OPERATOR <> (
   leftarg    = email, 
   rightarg   = email,
   procedure  = email_neq,
   commutator = <> ,
   negator    = =,
   restrict   = neqsel,
   join       = neqjoinsel,
   HASHES,
   MERGES
);

CREATE OPERATOR >= (
   leftarg    = email, 
   rightarg   = email,
   procedure  = email_ge,
   commutator = <= ,
   negator    = < ,
   restrict   = scalargtsel,
   join       = scalargtjoinsel
);

CREATE OPERATOR > (
   leftarg    = email, 
   rightarg   = email,
   procedure  = email_gt,
   commutator = < ,
   negator    = <= ,
   restrict   = scalargtsel,
   join       = scalargtjoinsel
);

CREATE OPERATOR ~ (
   leftarg    = email, 
   rightarg   = email,
   procedure  = email_deq,
   commutator = ~ ,
   negator    = !~ ,
   restrict   = eqsel,
   join       = eqjoinsel,
   HASHES,
   MERGES
);

CREATE OPERATOR !~ (
   leftarg    = email, 
   rightarg   = email,
   procedure  = email_ndeq,
   commutator = !~ ,
   negator    = ~ ,
   restrict   = neqsel,
   join       = neqjoinsel,
   HASHES,
   MERGES
);


-- create the support function

CREATE FUNCTION email_cmp(email, email) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_hval(email) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;


-- make the operator class

CREATE OPERATOR CLASS email_btree_ops
    DEFAULT FOR TYPE email USING btree AS
        OPERATOR        1       < ,
        OPERATOR        2       <= ,
        OPERATOR        3       = ,
        OPERATOR        4       >= ,
        OPERATOR        5       > ,
        -- OPERATOR        6       <> ,
        -- OPERATOR        7       ~ ,
        -- OPERATOR        8       !~ ;
	FUNCTION        1       email_cmp(email, email);

CREATE OPERATOR CLASS email_hash_ops
    DEFAULT FOR TYPE email USING hash AS
        OPERATOR        1       = ,
        FUNCTION        1       email_hval(email);


-- Test suit

CREATE TABLE UserSessions (
    username email,
    loggedIn timeStamp,
    loggedOut timeStamp
);

insert into UserSessions(username,loggedIn,loggedOut) values 
('jas@cse.unsw.edu.au','2012-07-01 15:45:55','2012-07-01 15:51:20'),
('jas@cse.unsw.EDU.AU','2012-07-01 15:50:30','2012-07-01 15:53:15'),
('z9987654@unsw.edu.au','2012-07-01 15:51:10','2012-07-01 16:01:05'),
('m.mouse@disney.com','2012-07-01 15:51:11','2012-07-01 16:01:06'),
('a-user@fast-money.com','2012-07-01 15:52:25','2012-07-01 16:10:15');

-- hash definitions

create index on UserSessions using hash (username);

select * from UserSessions;

-- btree definitions

--CREATE INDEX UserSessions_ind ON UserSessions USING btree(a email_ops);

SELECT * from UserSessions where username = 'abc@test.com';
SELECT * from UserSessions where username != 'abc@test.com';
SELECT * from UserSessions where username < 'abc@test.com';
SELECT * from UserSessions where username <= 'abc@test.com';
--SELECT * from UserSessions where username > 'abc@test.com';
SELECT * from UserSessions where username >= 'abc@test.com';
SELECT * from UserSessions where username ~ 'abc@test.com';
SELECT * from UserSessions where username !~ 'abc@test.com';


-- clean up the test
DROP TABLE UserSessions;
DROP TYPE email CASCADE;
