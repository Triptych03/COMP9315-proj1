---------------------------------------------------------------------------
--
-- email.sql
--
-- COMP9315 Database Systems Imp 
-- Stuart Aitken, Gina Jordanova
-- Assignment 1 Adding an Email Data Type to PostgreSQL
--
-- src/tutorial/emailaddress.source
--
---------------------------------------------------------------------------

-- the input function 'email_in' takes the textual representation and
-- converts it into the internal representation.

CREATE FUNCTION email_in(cstring)
   RETURNS emailaddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the output function 'email_out' takes the internal representation and
-- converts it into the textual representation.

CREATE FUNCTION email_out(emailaddress)
   RETURNS cstring
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary input function 'email_recv' takes a StringInfo buffer
-- and turns its contents into the internal representation.

CREATE FUNCTION email_recv(internal)
   RETURNS emailaddress
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;

-- the binary output function 'email_send' takes the internal representation
-- and converts it into a (hopefully) platform-independent bytea string.

CREATE FUNCTION email_send(emailaddress)
   RETURNS bytea
   AS '_OBJWD_/email'
   LANGUAGE C IMMUTABLE STRICT;


-- Type creation.

CREATE TYPE emailaddress (
   internallength = 256,
   input          = email_in,
   output         = email_out,
   receive        = email_recv,
   send           = email_send,
   alignment      = char
);


-- define the required operators

CREATE FUNCTION email_lt(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_le(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_eq(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_neq(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_gt(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_ge(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_deq(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;
   
CREATE FUNCTION email_ndeq(emailaddress, emailaddress) RETURNS bool
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;



CREATE OPERATOR < (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_lt,
   commutator = > ,
   negator    = >= ,
   restrict   = scalarltsel,
   join       = scalarltjoinsel
);

CREATE OPERATOR <= (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_le,
   commutator = >= ,
   negator    = > ,
   restrict   = scalarltsel,
   join       = scalarltjoinsel
);

CREATE OPERATOR = (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_eq,
   commutator = = ,
   negator    = <>,
   restrict   = eqsel,
   join       = eqjoinsel,
   HASHES,
   MERGES
);

CREATE OPERATOR <> (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_neq,
   commutator = <> ,
   negator    = =,
   restrict   = neqsel,
   join       = neqjoinsel,
   HASHES,
   MERGES
);

CREATE OPERATOR >= (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_ge,
   commutator = <= ,
   negator    = < ,
   restrict   = scalargtsel,
   join       = scalargtjoinsel
);

CREATE OPERATOR > (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_gt,
   commutator = < ,
   negator    = <= ,
   restrict   = scalargtsel,
   join       = scalargtjoinsel
);

CREATE OPERATOR ~ (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_deq,
   commutator = ~ ,
   negator    = !~ ,
   restrict   = eqsel,
   join       = eqjoinsel,
   HASHES,
   MERGES
);

CREATE OPERATOR !~ (
   leftarg    = emailaddress, 
   rightarg   = emailaddress,
   procedure  = email_ndeq,
   commutator = !~ ,
   negator    = ~ ,
   restrict   = neqsel,
   join       = neqjoinsel,
   HASHES,
   MERGES
);


-- create the support function

CREATE FUNCTION email_cmp(emailaddress, emailaddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;

CREATE FUNCTION email_hval(emailaddress) RETURNS int4
   AS '_OBJWD_/email' LANGUAGE C IMMUTABLE STRICT;


-- make the operator class

CREATE OPERATOR CLASS emailaddress_btree_ops
    DEFAULT FOR TYPE emailaddress USING btree AS
        OPERATOR        1       <  (emailaddress, emailaddress),
        OPERATOR        2       <= (emailaddress, emailaddress),
        OPERATOR        3       =  (emailaddress, emailaddress),
        OPERATOR        4       >= (emailaddress, emailaddress),
        OPERATOR        5       >  (emailaddress, emailaddress),
        -- OPERATOR        6       <> ,
        -- OPERATOR        7       ~ ,
        -- OPERATOR        8       !~ ;
	FUNCTION        1       email_cmp(emailaddress, emailaddress);

CREATE OPERATOR CLASS emailaddress_hash_ops
    DEFAULT FOR TYPE emailaddress USING hash AS
        OPERATOR        1       = ,
        FUNCTION        1       email_hval(emailaddress);


-- Test suit

CREATE TABLE UserSessionsA (
    username emailaddress,
    loggedIn timeStamp,
    loggedOut timeStamp
);

CREATE TABLE UserSessionsB (
    username emailaddress,
    loggedIn timeStamp,
    loggedOut timeStamp
);

insert into UserSessionsA(username,loggedIn,loggedOut) values 
('jas@cse.unsw.edu.au','2012-07-01 15:45:55','2012-07-01 15:51:20'),
('jas@cse.unsw.EDU.AU','2012-07-01 15:50:30','2012-07-01 15:53:15'),
('z9987654@unsw.edu.au','2012-07-01 15:51:10','2012-07-01 16:01:05'),
('m.mouse@disney.com','2012-07-01 15:51:11','2012-07-01 16:01:06'),
('a-user@fast-money.com','2012-07-01 15:52:25','2012-07-01 16:10:15');

insert into UserSessionsB(username,loggedIn,loggedOut) values 
('bas@cse.unsw.edu.au','2012-07-01 15:45:55','2012-07-01 15:51:20'),
('bas@cse.unsw.EDU.AU','2012-07-01 15:50:40','2012-07-01 15:53:15'),
('z123456@unsw.edu.au','2012-07-01 15:51:09','2012-07-01 16:01:05'),
('d.duck@disney.com','2012-07-01 15:51:11','2012-07-01 16:01:06'),
('b-user@fast-money.com','2012-07-01 15:52:30','2012-07-01 16:10:15');

create index on UserSessionsA using hash (username);
create index on UserSessionsA using btree(loggedIn);

\echo ''
\echo 'Testing: select * from UserSessionsA'
select * from UserSessionsA;
\echo ''
\echo 'Testing: select * from UserSessionsB'
select * from UserSessionsB;

\echo ''
\echo 'Testing: = eq jas@cse.unsw.edu.au'
SELECT * from UserSessionsA where username = 'jas@cse.unsw.edu.au';
\echo ''
\echo 'Testing: != neq jas@cse.unsw.edu.au'
SELECT * from UserSessionsA where username != 'jas@cse.unsw.edu.au';
\echo ''
\echo 'Testing: < lt m.mouse@disney.com'
SELECT * from UserSessionsA where username < 'm.mouse@disney.com';
\echo ''
\echo 'Testing: <= le m.mouse@disney.com'
SELECT * from UserSessionsA where username <= 'm.mouse@disney.com';
\echo ''
\echo 'Testing: > gt jas@cse.unsw.edu.au'
SELECT * from UserSessionsA where username > 'jas@cse.unsw.edu.au';
\echo ''
\echo 'Testing: >= ge jas@cse.unsw.edu.au'
SELECT * from UserSessionsA where username >= 'jas@cse.unsw.edu.au';
\echo ''
\echo 'Testing: ~ deq @cse.unsw.edu.au'
SELECT * from UserSessionsA where username ~ 'jas@cse.unsw.edu.au';
\echo ''
\echo 'Testing: !~ ndeq @cse.unsw.edu.au'
SELECT * from UserSessionsA where username !~ 'jas@cse.unsw.edu.au';

\echo ''
\echo 'Testing: join'
SELECT a.username, b.username from UserSessionsA a join UserSessionsB b on a.loggedIn = b.loggedIn;


-- clean up the test
DROP TABLE UserSessionsA;
DROP TABLE UserSessionsB;
DROP TYPE emailaddress CASCADE;
